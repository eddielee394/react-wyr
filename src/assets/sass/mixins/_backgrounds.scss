$background-gradients: ('#f00 #ff0'), ('#00f #0ff'), ('#00f #0ff #00f #0ff');

// Mixin slits string value to list
// @param {String} $string - sentence that will be spliced
// @param {String} $separator - separator symbol
// @param {Number} $limit - maximum count of list elements
@function str-split($string, $separator: null, $limit: null) {
	$string: unquote($string);

	@if type-of($string) != "string" {
		@error "`str-split` function expecting a string for $string; #{type-of($string)} given.";
	}

	$result: zip(());

	@if not $separator {
		@return ($string,);
	}

	@if $separator == "" {
		@for $i from 1 through str-length($string) {
			$result: append($result, str-slice($string, $i, $i));
		}

		@return $result;
	}

	$running: true;
	$progress: $string;
	$length: str-length($separator);

	@while $running {
		$index: str-index($progress, $separator);
		@if $index {
			$result: append($result, str-slice($progress, 1, ($index - 1)));
			$progress: str-slice($progress, ($index + $length));
		} @else {
			$running: false;
		}
	}

	$result: append($result, $progress);

	@if $limit and $limit > 0 {
		$limit: if($limit > length($result), length($result), $limit);
		$return: ();
		@for $i from 1 through $limit {
			$return: append($return, nth($result, $i));
		}

		@return $return;
	}

	@return $result;
}

// Convert angle
// @param {Number} $value - Value to convert
// @param {String} $unit - Unit to convert to
// @return {Number} Converted angle
@function convert-angle($value, $unit) {
	$convertable-units: deg grad turn rad;
	$conversion-factors: 1 (10grad/9deg) (1turn/360deg) (3.1415926rad/180deg);
	@if index($convertable-units, unit($value)) and index($convertable-units, $unit) {
		@return $value
             / nth($conversion-factors, index($convertable-units, unit($value)))
             * nth($conversion-factors, index($convertable-units, $unit));
	}

	@warn "Cannot convert `#{unit($value)}` to `#{$unit}`.";
}

// Test if `$value` is an angle
// @param {*} $value - Value to test
// @return {Bool}
@function is-direction($value) {
	$is-direction: index((to top, to top right, to right top, to right, to bottom right, to right bottom, to bottom, to bottom left, to left bottom, to left, to left top, to top left), $value);
	$is-angle: type-of($value) == 'number' and index('deg' 'grad' 'turn' 'rad', unit($value));

	@return $is-direction or $is-angle;
}

// Convert a direction to legacy syntax
// @param {Keyword | Angle} $value - Value to convert
// @require {function} is-direction
// @require {function} convert-angle
@function legacy-direction($value) {
	@debug $value;
	@if is-direction($value) == false {
		@warn "Cannot convert `#{$value}` to legacy syntax because it doesn't seem to be an angle or a direction";
	}

	$conversion-map: (
		to top : bottom,
		to top right : bottom left,
		to right top : left bottom,
		to right : left,
		to bottom right : top left,
		to right bottom : left top,
		to bottom : top,
		to bottom left : top right,
		to left bottom : right top,
		to left : right,
		to left top : right bottom,
		to top left : bottom right
	);

	@if map-has-key($conversion-map, $value) {
		@return map-get($conversion-map, $value);
	}

	@return 90deg - convert-angle($value, 'deg');
}

// Mixin printing a linear-gradient
// as well as a plain color fallback
// and the `-webkit-` prefixed declaration
// @access public
// @param {String | List | Angle} $direction - Linear gradient direction
// @param {Arglist} $color-stops - List of color-stops composing the gradient
@mixin linear-gradient($direction, $color-stops...) {
	background: nth(nth($color-stops, 1), 1);
	//background: -webkit-linear-gradient(legacy-direction($direction), $color-stops);
	background: linear-gradient($direction, $color-stops);
}

$prefix: 'brk';
$degrees: (0, 90, -90, 180, 50, 30);
$percents: ('0 100'), ('60 80');
// Mixin generating a linear-gradient classes
@mixin background {
	@for $i from 1 through length($background-gradients) {
		$colors-string: nth($background-gradients, $i);
		$colors-list: str-split($colors-string, ' ');

		@for $j from 1 through length($colors-list) {
			$color: nth($colors-list, $j);
		}

		@for $k from 1 through length($degrees) {
			$deg: nth($degrees, $k);

			//	to top
			@if ($deg == 0) {
				.#{$prefix}-gradient-#{$i}-top {
					@include linear-gradient(to top, $colors-list);
				}
				//	to right
			} @else if $deg == 90 {
				.#{$prefix}-gradient-#{$i}-right {
					@include linear-gradient(to right, $colors-list);
				}
				//	to left
			} @else if $deg == -90 {
				.#{$prefix}-gradient-#{$i}-left {
					@include linear-gradient(to left, $colors-list);
				}
				//	to bottom
			} @else if $deg == 180 {
				.#{$prefix}-gradient-#{$i}-bottom {
					@include linear-gradient(to bottom, $colors-list);
				}
				//	custom direction
			} @else {
				.#{$prefix}-gradient-#{$i}-#{$deg + 'deg'} {
					@include linear-gradient(#{$deg + 'deg'}, $colors-list);
				}
			}
		}
	}
}

//@include background;